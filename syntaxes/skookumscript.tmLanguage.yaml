# [PackageDev] target_format: plist, ext: tmLanguage
---
name: SkookumScript
scopeName: source.sk
# fileTypes: [sk]
# uuid: fff7b5ec-daec-459d-844d-4815557ba2f3

patterns:
- include: '#comment'
# - include: '#declarations'
- include: '#script-top-level'

repository:
  declarations:
    patterns:
    - include: '#type-declarations'

  type-declarations:
    patterns:
    - include: '#comment'
    # - include: '#storage-modifier'
    # - include: '#class-declaration'
    # - include: '#delegate-declaration'
    # - include: '#enum-declaration'
    # - include: '#interface-declaration'
    # - include: '#struct-declaration'
    # - include: '#attribute-section'

  script-top-level:
    patterns:
    - include: '#statement'

  statement:
    patterns:
    - include: '#comment'
    # - include: '#while-statement'
    # - include: '#do-statement'
    # - include: '#for-statement'
    # - include: '#foreach-statement'
    - include: '#keyword-control'
    # - include: '#if-statement'
    # - include: '#else-part'
    # - include: '#switch-statement'
    # - include: '#goto-statement'
    # - include: '#return-statement'
    # - include: '#break-or-continue-statement'
    # - include: '#throw-statement'
    # - include: '#yield-statement'
    # - include: '#await-statement'
    # - include: '#try-statement'
    # - include: '#checked-unchecked-statement'
    # - include: '#lock-statement'
    # - include: '#using-statement'
    # - include: '#labeled-statement'
    # - include: '#local-declaration'
    # - include: '#block'
    - include: '#expression'

  expression:
    patterns:
    # - include: '#preprocessor'
    - include: '#comment'
    # - include: '#checked-unchecked-expression'
    # - include: '#typeof-or-default-expression'
    # - include: '#nameof-expression'
    # - include: '#throw-expression'
    # - include: '#interpolated-string'
    # - include: '#verbatim-interpolated-string'
    # - include: '#this-or-base-expression'
    # - include: '#conditional-operator'
    # - include: '#expression-operators'
    # - include: '#await-expression'
    # - include: '#query-expression'
    # - include: '#as-expression'
    # - include: '#is-expression'
    # - include: '#anonymous-method-expression'
    # - include: '#object-creation-expression'
    # - include: '#array-creation-expression'
    # - include: '#anonymous-object-creation-expression'
    # - include: '#invocation-expression'
    # - include: '#member-access-expression'
    # - include: '#element-access-expression'
    # - include: '#cast-expression'
    - include: '#literal'
    - include: '#parenthesized-expression'
    - include: '#square-brackets-expression'
    - include: '#curly-brackets-expression'
    - include: '#operators'
    # - include: '#tuple-deconstruction-assignment'
    # - include: '#initializer-expression'
    # - include: '#identifier'
    - include: "#punctuation-accessor"

  comment:
    patterns:
    - name: comment.block.sk
      begin: /\*
      beginCaptures:
        '0': { name: punctuation.definition.comment.sk }
      end: \*/
      endCaptures:
        '0': { name: punctuation.definition.comment.sk }
    - name: comment.line.sk
      begin: (^\s+)?(?=//)
      beginCaptures:
        '1': { name: punctuation.whitespace.comment.leading.sk }
      end: (?=$)

  keyword-control:
    patterns:
    - name: keyword.control.conditional.if.sk
      match: (?<!\.)\b(if)\b
    - name: keyword.control.conditional.else.sk
      match: (?<!\.)\b(else)\b
    #- include: '#expression'

  # if-statement:
  #   begin: (?<!\.)\b(if).*?(?=\[)
  #   beginCaptures:
  #     '1': { name: keyword.control.conditional.if.sk }
  #   end: (?<=\])|(?=;)
  #   patterns:
  #   # - begin: \s
  #   #   beginCaptures:
  #   #     '0': { name: punctuation.parenthesis.open.sk }
  #   #   end: \[
  #   #   endCaptures:
  #   #     '0': { name: punctuation.parenthesis.close.sk }
  #   #   patterns:
  #   #   - include: '#expression'
  #   - include: '#statement'
  #   - include: '#statement'

  # else-part:
  #   begin: (?<!\.)\b(else)\b
  #   beginCaptures:
  #     '1': { name: keyword.control.conditional.else.sk }
  #   end: (?<=\])|(?=;)
  #   patterns:
  #   - include: '#statement'

  literal:
    patterns:
    - include: '#boolean-literal'
    # - include: '#null-literal'
    - include: '#numeric-literal'
    - include: '#char-literal'
    - include: '#string-literal'
    # - include: '#verbatim-string-literal'
    # - include: '#tuple-literal'

  boolean-literal:
    patterns:
    - name: constant.language.boolean.true.sk
      match: (?<!\.)\btrue\b
    - name: constant.language.boolean.false.sk
      match: (?<!\.)\bfalse\b

  # null-literal:
  #   name: constant.language.null.sk
  #   match: (?<!\.)\bnull\b

  numeric-literal:
    patterns:
    # C# grammar: 0x hex-digits integer-type-suffix[opt] OR 0X hex-digits integer-type-suffix[opt]
    - name: constant.numeric.hex.sk
      match: \b0(x|X)[0-9a-fA-F_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b
    # C# grammar: 0b binary-digits integer-type-suffix[opt] OR 0B binary-digits integer-type-suffix[opt]
    - name: constant.numeric.binary.sk
      match: \b0(b|B)[01_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b
    # C# grammar: decimal-digits . decimal-digits exponent-part[opt] real-type-suffix[opt] OR . decimal-digits exponent-part[opt] real-type-suffix[opt]
    - name: constant.numeric.decimal.sk
      match: \b([0-9_]+)?\.[0-9_]+((e|E)[0-9]+)?(F|f|D|d|M|m)?\b
    #  C# grammar: decimal-digits exponent-part real-type-suffix[opt]
    - name: constant.numeric.decimal.sk
      match: \b[0-9_]+(e|E)[0-9_]+(F|f|D|d|M|m)?\b
    # C# grammar: decimal-digits real-type-suffix
    - name: constant.numeric.decimal.sk
      match: \b[0-9_]+(F|f|D|d|M|m)\b
    # C# grammar: decimal-digits integer-type-suffix[opt]
    - name: constant.numeric.decimal.sk
      match: \b[0-9_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b

  char-literal:
    name: string.quoted.single.sk
    begin: "'"
    beginCaptures:
      '0': { name: punctuation.definition.char.begin.sk }
    end: (\')|((?:[^\\\n])$)
    endCaptures:
      '1': { name: punctuation.definition.char.end.sk }
      '2': { name: invalid.illegal.newline.sk }
    patterns:
    - include: '#char-character-escape'

  char-character-escape:
    name: constant.character.escape.sk
    match: \\(['"\\0abfnrtv]|x[0-9a-fA-F]{1,4}|u[0-9a-fA-F]{4})

  string-literal:
    name: string.quoted.double.sk
    begin: '(?<!@)"'
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.sk }
    end: (")|((?:[^\\\n])$)
    endCaptures:
      '1': { name: punctuation.definition.string.end.sk }
      '2': { name: invalid.illegal.newline.sk }
    patterns:
    - include: '#string-character-escape'

  string-character-escape:
    name: constant.character.escape.sk
    match: \\(['"\\0abfnrtv]|x[0-9a-fA-F]{1,4}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4})

  parenthesized-expression:
    begin: \(
    beginCaptures:
      '0': { name: punctuation.parenthesis.open.sk }
    end: \)
    endCaptures:
      '0': { name: punctuation.parenthesis.close.sk }
    patterns:
    - include: '#statement'
    - include: '#expression'

  square-brackets-expression:
    begin: \[
    beginCaptures:
      '0': { name: punctuation.square-brackets.open.sk }
    end: \]
    endCaptures:
      '0': { name: punctuation.square-brackets.close.sk }
    patterns:
    - include: '#statement'
    - include: '#expression'

  curly-brackets-expression:
    begin: \{
    beginCaptures:
      '0': { name: punctuation.curly-brackets.open.sk }
    end: \}
    endCaptures:
      '0': { name: punctuation.curly-brackets.close.sk }
    patterns:
    - include: '#statement'
    - include: '#expression'

  operators:
    name: keyword.operators.sk
    match: (?<!=|!)((?:=|\+|-|\*|/|%|&|\||\^|\<|\>|:|!|~))

  punctuation-accessor:
    name: punctuation.accessor.sk
    match: \.